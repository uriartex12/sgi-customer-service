openapi: 3.0.0
info:
  title: Customer Service API
  version: 1.0.0
servers:
  - url: http://localhost:8082
paths:
  /v1/customers:
    get:
      summary: Retrieve all customers
      operationId: getAllCustomers
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a customer
      operationId: createCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      responses:
        '201':
          description: Customer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/customers/{customerId}:
    get:
      summary: Retrieve a customer by ID
      operationId: getCustomerById
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update a customer
      operationId: updateCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      responses:
        '200':
          description: Updated customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          '404':
            description: Account not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a customer
      operationId: deleteCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Account deleted
          '404':
            description: Account not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/customers/{customerId}/summary:
    get:
      summary: List product summary by customerId
      operationId: getCustomerSummary
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Report details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SummaryResponse'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    CustomerRequest:
      type: object
      required:
        - name
        - type
        - documentId
      properties:
        name:
          type: string
        type:
          type: string
          enum: [ PERSONAL, BUSINESS ]
        profile:
          type: string
          enum: [ VIP, PYME ]
        documentId:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        address:
          type: string
    SummaryResponse:
      type: object
      required:
        - customerId
        - name
        - product
      properties:
        customerId:
          type: string
        name:
          type: string
        product:
          type: object
          properties:
            accounts:
              type: array
            cards:
              type: array
            credits:
              type: array
    CustomerResponse:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [PERSONAL, BUSINESS]
        profile:
          type: string
          enum: [ VIP, PYME ]
        documentId:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        address:
          type: string
    CreditResponse:
      type: object
      properties:
        id:
          type: string
        creditNumber:
          type: string
        type:
          type: string
          enum: [ PERSONAL, BUSINESS ]
        creditLimit:
          type: decimal
        consumptionAmount:
          type: decimal
        balance:
          type: decimal
        interestRate:
          type: decimal
        clientId:
          type: string
        createdDate:
          type: string
          format: date-time
    AccountResponse:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [ savings, checking, fixed term ]
        balance:
          type: object
        accountNumber:
          type: string
        createdDate:
          type: string
          format: date-time
        movementLimit:
          type: integer
        maintenanceFee:
          type: number
        commissionFee:
          type: number
        clientId:
          type: string
        transactionDay:
          type: string
          format: date
        holders:
          type: array
          items:
            type: string
    CardResponse:
      type: object
      required:
        - cardNumber
        - expirationDate
        - mainAccountId
      properties:
        id:
          type: string
        cardNumber:
          type: string
        expirationDate:
          type: string
          format: date-time
        type:
          type: string
          enum: [ DEBIT , CREDIT ]
        mainAccountId:
          type: string
        associatedAccountIds:
          type: array
          items:
            type: string
        clientId:
          type: string
    ErrorResponse:
      type: object
      required:
        - status
        - code
        - message
        - timestamp
      properties:
        status:
          type: int
        code:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time

